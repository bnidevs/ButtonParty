{
	"AWSTemplateFormatVersion" : "2010-09-09",
	"Parameters" : {
	    "KeyName": {
	      	"Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
	      	"Type": "AWS::EC2::KeyPair::KeyName",
	      	"ConstraintDescription" : "must be the name of an existing EC2 KeyPair"
	    },
	    "DBUsername": {
	    	"NoEcho": "true",
	      	"Description" : "Username for accessing DB",
	      	"Type": "String",
	      	"ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters",
	      	"MinLength" : "4",
	      	"MaxLength" : "16",
	      	"AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*"
	    },
	    "DBPassword": {
	    	"NoEcho": "true",
	      	"Description" : "Password for accessing DB",
	      	"Type": "String",
	      	"ConstraintDescription" : "must contain only alphanumeric characters, and be between 8 and 30 characters",
	      	"MinLength" : "8",
	      	"MaxLength" : "30",
	      	"AllowedPattern" : "[a-zA-Z0-9]*"
	    },
		"LambdaBucket": {
			"Description" : "Name of an existing S3 bucket with the fetch lambda deployment zip inside",
			"Type": "String",
			"ConstraintDescription" : "must be the name of an existing S3 bucket"
	  	}
   	},
	"Resources" : {
	    "outgoingTrafficHandler" : {
	      	"Type" : "AWS::EC2::Instance",
		    "Properties" : {
		        "InstanceType" : "t2.micro",
		        "SecurityGroupIds" : [ 
		        	{
		        		"Fn::GetAtt" : 
		        		[ 
		        			"defaultSecurityGroup", 
		        			"GroupId" 
		        		] 
	        		}
		        ],
		        "KeyName" : { 
		        	"Ref" : "KeyName" 
		        },
		        "ImageId" : "ami-0cfc05f17eac80275",
		        "SubnetId" : { "Ref" : "omniVPCSubnet" }
	      	},
	      	"Metadata": {
	      		"Title": "OUTGOING TRAFFIC HANDLER",
	      		"Purpose": [
	      			"this instance sends messages to the SNS to be distributed as push notifs",
	      			"it will also pass timestamps to the incoming-traffic-handler"
	      		]
	      	}
	    },
	    "incomingTrafficHandler" : {
	      	"Type" : "AWS::EC2::Instance",
		    "Properties" : {
		        "InstanceType" : "t3.small",
		        "SecurityGroupIds" : [ 
		        	{
		        		"Fn::GetAtt" : 
		        		[ 
		        			"defaultSecurityGroup", 
		        			"GroupId" 
		        		] 
	        		}
		        ],
		        "KeyName" : { 
		        	"Ref" : "KeyName" 
		        },
		        "ImageId" : "ami-0cfc05f17eac80275",
		        "SubnetId" : { "Ref" : "omniVPCSubnet" }
	      	},
	      	"Metadata": {
	      		"Title": "INCOMING TRAFFIC HANDLER",
	      		"Purpose": [
	      			"this instance handles api calls and writes to the database",
	      			"it will also injest timestamps from the outgoing-traffic-handler"
	      		],
	      		"Note": "FUTURE UPDATE: THIS SHOULD BE PLACED INTO AN AUTO SCALING GROUP"
	      	}
	    },
  		"dbSecret": {
    		"Type": "AWS::SecretsManager::Secret",
    		"Properties": {
      			"Name": "buttonpartyDBSecret",
  				"SecretString": 
  				{ "Fn::Join" :
  					[ "", 
  						[
  							"{\"username\":\"",
  							{
  								"Ref" : "DBUsername"
  							},
  							"\",\"password\":\"",
  							{
  								"Ref" : "DBUsername"
  							},
  							"\"}"
  						]
  					]
  				}
    		}
  		},
  		"dbCluster" : {
          	"Type": "AWS::RDS::DBCluster",
          	"Properties" : {
              	"MasterUsername" : {
                  	"Ref": "DBUsername"
              	},
              	"MasterUserPassword" : {
                  	"Ref": "DBPassword"
              	},
              	"DBClusterIdentifier" : "buttonParty-serverless-cluster",
              	"Engine" : "aurora",
              	"EngineVersion" : "5.6.10a",
              	"EngineMode" : "serverless",
              	"ScalingConfiguration" : {
                  	"AutoPause" : false,
                  	"MinCapacity" : 1,
                  	"MaxCapacity" : 2
              	},
              	"AvailabilityZones" : [
              		"us-east-1a"
              	],
              	"DatabaseName" : "users",
              	"DBSubnetGroupName" : {
              		"Ref" : "buttonpartydbsubnet"
              	},
              	"VpcSecurityGroupIds" : [ 
		        	{
		        		"Fn::GetAtt" : 
		        		[ 
		        			"defaultSecurityGroup", 
		        			"GroupId" 
		        		] 
	        		}
		        ],
              	"DeletionProtection": true,
              	"EnableHttpEndpoint": true,
              	"KmsKeyId" : "alias/aws/rds",
              	"StorageEncrypted" : true,
              	"PreferredMaintenanceWindow" : "sun:03:00-sun:03:30"
          	}
      	},
	    "omniVPC": {
		  	"Type" : "AWS::EC2::VPC",
		  	"Properties" : {
		  		"CidrBlock" : "139.103.122.0/24",
		      	"InstanceTenancy" : "default"
		    },
		    "Metadata": {
	      		"Title": "VPC",
	      		"Purpose": "this vpc contains all provisioned resources and the security group written below"
	      	}
		},
		"buttonpartydbsubnet": {
			"Type" : "AWS::RDS::DBSubnetGroup",
			"Properties" : {
				"DBSubnetGroupDescription" : "Subnet group for DB cluster",
      			"DBSubnetGroupName" : "buttonpartydbsubnet",
      			"SubnetIds" : [
      				{
      					"Ref" : "omniVPCSubnet"
      				},
      				{
      					"Ref" : "omniVPCSubnet2"
      				}
      			]
			}
		},
		"omniVPCSubnet": {
		  	"Type" : "AWS::EC2::Subnet",
		  	"Properties" : {
		      	"CidrBlock" : "139.103.122.0/28",
		      	"AvailabilityZone" : "us-east-1a",
		      	"VpcId" : { "Ref" : "omniVPC" }
		    }
		},
		"omniVPCSubnet2": {
		  	"Type" : "AWS::EC2::Subnet",
		  	"Properties" : {
		      	"CidrBlock" : "139.103.122.100/28",
		      	"AvailabilityZone" : "us-east-1b",
		      	"VpcId" : { "Ref" : "omniVPC" }
		    }
		},
	    "defaultSecurityGroup": {
	      	"Type": "AWS::EC2::SecurityGroup",
	      	"Properties": {
	      		"GroupDescription": "default security group",
	      		"VpcId": { "Ref" : "omniVPC" }
	      	},
	      	"Metadata": {
	      		"Title": "DEFAULT SECURITY GROUP",
	      		"Purpose": "this security group is meant as a containing security group for all provisioned resources"
	      	}
	    },
	    "mysqlIngress": {
      		"Type": "AWS::EC2::SecurityGroupIngress",
      		"Properties": {
        		"GroupId": { 
    				"Fn::GetAtt" : 
	        		[ 
	        			"defaultSecurityGroup", 
	        			"GroupId" 
	        		] 
	        	},
        		"IpProtocol": "tcp",
        		"FromPort": "3306",
        		"ToPort": "3306",
        		"SourceSecurityGroupId": { 
    				"Fn::GetAtt" : 
	        		[ 
	        			"defaultSecurityGroup", 
	        			"GroupId" 
	        		] 
	        	}
      		}
    	},
    	"sshIngress": {
      		"Type": "AWS::EC2::SecurityGroupIngress",
      		"Properties": {
        		"GroupId": { 
    				"Fn::GetAtt" : 
	        		[ 
	        			"defaultSecurityGroup", 
	        			"GroupId" 
	        		] 
	        	},
        		"IpProtocol": "tcp",
        		"FromPort": "22",
        		"ToPort": "22",
        		"CidrIp": "0.0.0.0/0"
      		}
    	},
    	"httpIngress": {
      		"Type": "AWS::EC2::SecurityGroupIngress",
      		"Properties": {
        		"GroupId":  { 
    				"Fn::GetAtt" : 
	        		[ 
	        			"defaultSecurityGroup", 
	        			"GroupId" 
	        		] 
	        	},
        		"IpProtocol": "tcp",
        		"FromPort": "80",
        		"ToPort": "80",
        		"SourceSecurityGroupId": { 
    				"Fn::GetAtt" : 
	        		[ 
	        			"defaultSecurityGroup", 
	        			"GroupId" 
	        		] 
	        	}
      		}
    	},
	    "mysqlEgress": {
      		"Type": "AWS::EC2::SecurityGroupEgress",
      		"Properties": {
        		"GroupId": { 
    				"Fn::GetAtt" : 
	        		[ 
	        			"defaultSecurityGroup", 
	        			"GroupId" 
	        		] 
	        	},
        		"IpProtocol": "tcp",
        		"FromPort": "3306",
        		"ToPort": "3306",
        		"SourceSecurityGroupId": { 
    				"Fn::GetAtt" : 
	        		[ 
	        			"defaultSecurityGroup", 
	        			"GroupId" 
	        		] 
	        	}
      		}
    	},
    	"timestampSQS": {
    		"Type" : "AWS::SQS::Queue",
		  	"Properties" : {
		      	"DelaySeconds" : 0,
		      	"KmsMasterKeyId" : "alias/aws/sqs"
		    }
    	},
    	"addUserSQS": {
			"Type" : "AWS::SQS::Queue",
		  	"Properties" : {
		      	"DelaySeconds" : 0,
		      	"KmsMasterKeyId" : "alias/aws/sqs"
		    }
    	},
    	"pressButtonSQS": {
    		"Type" : "AWS::SQS::Queue",
		  	"Properties" : {
		      	"DelaySeconds" : 0,
		      	"KmsMasterKeyId" : "alias/aws/sqs"
		    }
    	},
    	"powerupSQS": {
    		"Type" : "AWS::SQS::Queue",
		  	"Properties" : {
		      	"DelaySeconds" : 0,
		      	"KmsMasterKeyId" : "alias/aws/sqs"
		    }
    	},
    	"routingAPIGW": {
    		"Type" : "AWS::ApiGatewayV2::Api",
			"Properties" : {
		      	"Name" : "ButtonPartyAPIGW",
		      	"ProtocolType" : "HTTP",
		      	"Target": "https://google.com"
		    }
    	},
    	"addUserRoute": {
    		"Type" : "AWS::ApiGatewayV2::Route",
		  	"Properties" : {
		      	"ApiId" : { "Ref" : "routingAPIGW" },
		      	"RouteKey" : "POST /add",
		      	"Target" : {
	                "Fn::Join": [
	                    "/",
	                    [
	                        "integrations",
	                        {
	                            "Ref": "addUserAPIIntegration"
	                        }
	                    ]
	                ]
	            }
		    }
    	},
    	"addUserAPIIntegration": {
    		"Type" : "AWS::ApiGatewayV2::Integration",
		  	"Properties" : {
		      	"ApiId" : { 
		      		"Ref" : "routingAPIGW" 
		      	},
		      	"CredentialsArn" : { 
		      		"Fn::GetAtt" : [ "APIGWRole" , "Arn" ] 
		      	},
		      	"IntegrationSubtype" : "SQS-SendMessage",
		      	"IntegrationType" : "AWS_PROXY",
		      	"PayloadFormatVersion" : "1.0",
		      	"RequestParameters" : {
		      		"QueueUrl": {
			      		"Ref" : "addUserSQS"
			      	},
		      		"MessageBody": "$request.body.RequestBody"
		      	}
		    }
    	},
    	"pressButtonRoute": {
    		"Type" : "AWS::ApiGatewayV2::Route",
		  	"Properties" : {
		      	"ApiId" : { "Ref" : "routingAPIGW" },
		      	"RouteKey" : "POST /press",
		      	"Target" : {
	                "Fn::Join": [
	                    "/",
	                    [
	                        "integrations",
	                        {
	                            "Ref": "pressButtonAPIIntegration"
	                        }
	                    ]
	                ]
	            }
		    }
    	},
    	"pressButtonAPIIntegration": {
    		"Type" : "AWS::ApiGatewayV2::Integration",
		  	"Properties" : {
		      	"ApiId" : { 
		      		"Ref" : "routingAPIGW" 
		      	},
		      	"CredentialsArn" : { 
		      		"Fn::GetAtt" : [ "APIGWRole" , "Arn" ] 
		      	},
		      	"IntegrationSubtype" : "SQS-SendMessage",
		      	"IntegrationType" : "AWS_PROXY",
		      	"PayloadFormatVersion" : "1.0",
		      	"RequestParameters" : {
		      		"QueueUrl": {
			      		"Ref" : "pressButtonSQS"
			      	},
		      		"MessageBody": "$request.body.RequestBody"
		      	}
		    }
    	},
		"fetchSelfDataRoute": {
    		"Type" : "AWS::ApiGatewayV2::Route",
		  	"Properties" : {
		      	"ApiId" : { "Ref" : "routingAPIGW" },
		      	"RouteKey" : "GET /fetch/self",
		      	"Target" : {
	                "Fn::Join": [
	                    "/",
	                    [
	                        "integrations",
	                        {
	                            "Ref": "fetchDataAPIIntegration"
	                        }
	                    ]
	                ]
	            }
		    }
    	},
		"fetchLeaderboardRoute": {
    		"Type" : "AWS::ApiGatewayV2::Route",
		  	"Properties" : {
		      	"ApiId" : { "Ref" : "routingAPIGW" },
		      	"RouteKey" : "GET /fetch/lb",
		      	"Target" : {
	                "Fn::Join": [
	                    "/",
	                    [
	                        "integrations",
	                        {
	                            "Ref": "fetchDataAPIIntegration"
	                        }
	                    ]
	                ]
	            }
		    }
    	},
    	"fetchDataAPIIntegration": {
    		"Type" : "AWS::ApiGatewayV2::Integration",
		  	"Properties" : {
		      	"ApiId" : { 
		      		"Ref" : "routingAPIGW" 
		      	},
		      	"CredentialsArn" : { 
		      		"Fn::GetAtt" : [ "APIGWRole" , "Arn" ] 
		      	},
		      	"IntegrationType" : "AWS_PROXY",
				"IntegrationUri": {
					"Fn::Join": [
						"",
						[
							"arn:",
							{
								"Ref": "AWS::Partition"
							},
							":apigateway:",
							{
								"Ref": "AWS::Region"
							},
							":lambda:path/2015-03-31/functions/",
							{
								"Fn::GetAtt": [
									"FetchDataLambda",
									"Arn"
								]
							},
							"/invocations"
						]
					]
				},
				"IntegrationMethod": "POST",
				"PayloadFormatVersion": "2.0"
		    }
    	},
    	"APIGWRole": {
		  	"Type" : "AWS::IAM::Role",
		  	"Properties" : {
		  		"AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "apigateway.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
		      	"Policies" : [
		      		{
		      			"PolicyName": "buttonpartyAPIGW-role",
                        "PolicyDocument": {
				      		"Version": "2012-10-17",
		                    "Statement": [
		                        {
		                        	"Sid": "allowGwSendMsg",
		                            "Effect": "Allow",
		                            "Action": [
		                                "sqs:SendMessage"
		                            ],
		                            "Resource": [
		                            	{ 
								      		"Fn::GetAtt" : [ "pressButtonSQS" , "Arn" ] 
								      	},
		                				{ 
								      		"Fn::GetAtt" : [ "addUserSQS" , "Arn" ] 
								      	}
		                            ]
		                        }
		                    ]
		                }
			      	}
		      	]
		    }
		},
		"FetchDataLambda": {
			"Type" : "AWS::Lambda::Function",
			"Properties" : {
				"Code" : {
					"S3Bucket": {
						"Ref" : "LambdaBucket"
					},
					"S3Key": "FetchHandler.zip"
				},
				"FunctionName" : "ButtonParty-DataFetch",
				"Handler" : "lambda_function.lambda_handler",
				"MemorySize" : 512,
				"PackageType" : "Zip",
				"Role" : {
					"Fn::GetAtt" : [ "FetchDataLambdaRole" , "Arn" ] 
				},
				"Runtime" : "python3.9",
				"Timeout" : 30
			},
			"Metadata": {
				"Note": "THIS LAMBDA IS ASSUMED TO BE IN THE BUCKET ON DEPLOYMENT"
			}
		},
		"FetchDataLambdaRole": {
			"Type" : "AWS::IAM::Role",
		  	"Properties" : {
		  		"AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
				"ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/SecretsManagerReadWrite",
					"arn:aws:iam::aws:policy/CloudWatchFullAccess",
					"arn:aws:iam::aws:policy/AmazonRDSDataFullAccess"
                ]
		    }
		}
  	}
}